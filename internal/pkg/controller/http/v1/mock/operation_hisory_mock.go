// Code generated by MockGen. DO NOT EDIT.
// Source: operation_history.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	reflect "reflect"

	entity "github.com/artemKapitonov/avito_test_task/internal/pkg/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockOperationHistory is a mock of OperationHistory interface.
type MockOperationHistory struct {
	ctrl     *gomock.Controller
	recorder *MockOperationHistoryMockRecorder
}

// MockOperationHistoryMockRecorder is the mock recorder for MockOperationHistory.
type MockOperationHistoryMockRecorder struct {
	mock *MockOperationHistory
}

// NewMockOperationHistory creates a new mock instance.
func NewMockOperationHistory(ctrl *gomock.Controller) *MockOperationHistory {
	mock := &MockOperationHistory{ctrl: ctrl}
	mock.recorder = &MockOperationHistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperationHistory) EXPECT() *MockOperationHistoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockOperationHistory) Get(ctx context.Context, userID uint64, sort string, isDesc bool) ([]entity.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID, sort, isDesc)
	ret0, _ := ret[0].([]entity.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOperationHistoryMockRecorder) Get(ctx, userID, sort, isDesc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOperationHistory)(nil).Get), ctx, userID, sort, isDesc)
}
